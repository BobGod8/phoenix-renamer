plugins {
    id "com.jfrog.bintray" version "1.4"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext {
    appName = 'phoenix-renamer'
    baseVersion = '1.0.11'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url  "http://dl.bintray.com/opensagetv/maven"
    }
    maven {
        url  "http://dl.bintray.com/stuckless/sagetvphoenix"
    }
}

dependencies {
    // the plugin jars should be extrated here
    compile fileTree(dir: 'lib', include: '*.jar')

    // compile time jars
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "${appName}",
                "Implementation-Version": baseVersion
        )
    }
}

// setup testing
test {
    // set a system property for the test JVM(s)
    systemProperty 'java.library.path', file('lib').getAbsolutePath()

    // explicitly include or exclude tests
    include '**'
    // if you need to exclude some tests
    // exclude 'test/junit/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + ": " + event.message )
    }

    // if you need to set another working dir for tests
    //workingDir 'target/testing/'
}

clean {
    // extra folders to clean
    delete 'target'
    delete 'bin'
}

// uploading to BinTray
// use ./gradlew bintrayUpload
bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API");

    filesSpec {
        from ('build/dist/') {
            include "*${baseVersion}*"
        }
        into "${appName}/${baseVersion}"
    }

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'sagetvphoenix'
        name = "${appName}"
        //userOrg = 'opensagetv'
        desc = "Commandline Media Renaming Tool for TV and Music"
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/stuckless/phoenix-renamer'
        labels = ['sagetv']
        publicDownloadNumbers = true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        version {
            name = "${baseVersion}"
            desc = "Commandline Media Renaming Tool"
            vcsTag = "${baseVersion}"
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

task packageAll << {
    ant.properties.version = baseVersion;
    ant.ant (
            antfile: "buildjar.xml",
            target: "package"
    )
}
packageAll.dependsOn jar